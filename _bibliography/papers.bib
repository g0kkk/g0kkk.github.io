---
---

@inproceedings{raj2024fuzz,
  title={Fuzz to the Future: Uncovering Occluded Future Vulnerabilities via Robust Fuzzing},
  author={Raj, Arvind S and Gibbs, Wil and Dong, Fangzhou and Vadayath, Jayakrishna Menon and Tompkins, Michael and Wirsz, Steven and Liu, Yibo and Hu, Zhenghao and Zhu, Chang and Menon, Gokulkrishna Praveen and others},
  booktitle={Proceedings of the 2024 on ACM SIGSAC Conference on Computer and Communications Security},
  pages={3719--3733},
  year={2024}
}

@inproceedings{vadayath_arbiter_22,
    title = "Arbiter: Bridging the Static and Dynamic Divide in Vulnerability Discovery on Binary Programs",
    author = "Vadayath, Jayakrishna
    and Eckert, Moritz
    and Zeng, Kyle
    and Weideman, Nicolaas
    and Menon, Gokulkrishna Praveen
    and Fratantonio, Yanick
    and Balzarotti, Davide
    and Doup{\'e}, Adam
    and Bao, Tiffany
    and Wang, Ruoyu
    and Hauser, Christophe
    and Shoshitaishvili, Yan",
    booktitle = "31st USENIX Security Symposium (USENIX Security 22)",
    month = August,
    year = "2022",
    address = "Boston, MA",
    publisher = "USENIX Association",
    url = "https://www.usenix.org/conference/usenixsecurity22/presentation/vadayath",
    abstract = "In spite of their effectiveness in the context of vulnerability discovery, current state-of-the-art binary program analysis approaches are limited by inherent trade-offs between accuracy and scalability. In this paper, we identify a set of vulnerability properties that can aid both static and dynamic vulnerability detection techniques, improving the precision of the former and the scalability of the latter. By carefully integrating static and dynamic techniques, we detect vulnerabilities that exhibit these properties in real-world programs at a large scale. We implemented our technique, making several advancements in the analysis of binary code, and created a prototype called ARBITER. We demonstrate the effectiveness of our approach with a large-scale evaluation on four common vulnerability classes: CWE-131 (Incorrect Calculation of Buffer Size), CWE-252 (Unchecked Return Value), CWE-134 (Uncontrolled Format String), and CWE-337 (Predictable Seed in Pseudo-Random Number Generator). We evaluated our approach on more than 76,516 x86-64 binaries in the Ubuntu repositories and discovered new vulnerabilities, including a flaw inserted into programs during compilation.",
    selected={true},
}
